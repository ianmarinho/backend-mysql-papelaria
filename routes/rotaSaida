const express = require("express");
const router = express.Router();
const sqlite3 = require("sqlite3").verbose();
const db = new sqlite3.Database("database.db");

db.run("CREATE TABLE IF NOT EXISTS saida (id INTEGER PRIMARY KEY AUTOINCREMENT, id_produto, quantidade REAL, valor_unitario REAL, data DATE)", (createTableError) => {
    if (createTableError) {
        return res.status(500).send({
            error: createTableError.message
        });
    }

    // O restante do código, se necessário...


});

router.get("/", (req, res, next) => {


    db.all(`SELECT 

    saida.id as id, 
    saida.id_produto as id_produto,
    saida.quantidade as quantidade,
    saida.data_saida as data_saida,
    produto.descricao as descricao,
    saida.valor_unitario as valor_unitario

    FROM saida 

    INNER JOIN produto 

    ON saida.id_produto = produto.id`, (error, rows) => {

        if (error) {
            return res.status(500).send({
                error: error.message
            });
        }
        res.status(200).send({
            mensagem: "Aqui está a lista de saida",
            saida: rows
        });
    });
});

router.post('/', (req, res) => {
    const { idproduto, quantidade, valorunitario, datasaida } = req.body;


    db.run(`INSERT INTO saida (id_produto, quantidade, valor_unitario, data) VALUES (?, ?, ?, ?)`,
        [idproduto, quantidade, valorunitario, datasaida],
        function (insertError) {
            if (insertError) {
                return res.status(500).send({
                    error: insertError.message,
                    response: null
                });
            }

            atualizarestoque(idproduto, quantidade, valorunitario)

            res.status(201).send({
                mensagem: "Saida Registrada!",
                saidaProduto: {
                    id: this.lastID,
                    idproduto: idproduto,
                    quantidade: quantidade,
                    valorunitario: valorunitario,
                    datasaida: datasaida
                }
            });
        });
});

router.delete("/:id", (req, res, next) => {
    const { id } = req.params;

    db.run("DELETE FROM saida WHERE id = ?", id, (error) => {
        if (error) {
            return res.status(500).send({
                error: error.message
            });
        }

        res.status(200).send({
            mensagem: "Saida deletado com successo",

        })

    });

});

function atualizarestoque(idproduto, quantidade, valorunitario) {
    db.all('SELECT * FROM estoque WHERE id_produto=?', [idproduto], (error, rows) => {
        if (error) {
            return false;
        }
        if (rows.length > 0) {

            let qtde = rows[0].quantidade;
            qtde = parseFloat(qtde) - parseFloat(quantidade);


            db.run("UPDATE estoque SET quantidade=?, valor_unitario=? WHERE id_produto=?",
                [qtde, valorunitario, idproduto], (error) => {
                    if (error) {
                        return false
                    }
                });

        } else {
            db.serialize(() => {
                const insertEstoque = db.prepare("INSERT INTO estoque (id_produto, quantidade, valor_unitario) VALUES(?,?,?)");
                insertEstoque.run(idproduto, quantidade, valorunitario);
                insertEstoque.finalize();
            });
        }
    });
    return true;
}

module.exports = router;